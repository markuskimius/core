#!/usr/bin/env bash

##############################################################################
# CORE: Essential unix utilities
# https://github.com/markuskimius/core
#
# Copyright (c)2020-2024 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/core/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Control the crontab.

Usage: ${SCRIPTNAME} COMMAND

COMMAND:
  install               Install the crontab from the configs.
  print                 Print the crontab to install.
  diff                  Diff the crontab to install.

The crontab is generated from the configuration by combining all files matching
the pattern "${DPM}/*/etc/core-cron.tab" and processing them via core-doc.sh.

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

source "getopt.sh" || exit 1
source "core-doc.sh" || exit 1

SCRIPTNAME=$(basename -- "$BASH_SOURCE")


function main() {
    local OPTOPT OPTARG
    local cmd

    # Process options
    while getopt-sh "h" "help" "$@"; do
        case "$OPTOPT" in
            -h|--help)  usage && exit 0 ;;
            *)          exitcode=1      ;;
        esac
    done
    cmd=${OPTARG[0]}

    # Sanity check
    if (( ! ${#OPTARG[@]} )); then
        printf "COMMAND required\n\n" 1>&2
        exitcode=1
    fi

    if (( exitcode )); then
        usage 1>&2
        exit $exitcode
    fi

    # Execute command
    case "$cmd" in
        install) cron-install "${OPTARG[@]:1}" ;;
        print)   cron-print   "${OPTARG[@]:1}" ;;
        diff)    cron-diff    "${OPTARG[@]:1}" ;;
        *)       printf "%s: Invalid command\n" "${cmd}" && exit 1;;
    esac
}


function cron-install() {
    local newtab=$(cron-print)

    # Show the diff first
    "${DIFF-diff}" -u <(crontab -l) <(printf "%s\n\n" "$newtab")

    # Install the new crontab
    printf "Applying new crontab...\n"
    printf "%s\n\n" "$newtab" | crontab -
}


function cron-print() {
    cat <<EOF
##############################################################################
# Auto generated by '${SCRIPTNAME}' on $(date)

EOF
    core-doc "core-cron.tab"
}


function cron-diff() {  
    "${DIFF-diff}" -u "$@" <(crontab -l) <(cron-print)
}


##############################################################################
# ENTRY POINT

main "$@"


# vim:ft=bash
