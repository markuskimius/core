#!/usr/bin/env bash

##############################################################################
# CORE: Essential unix utilities
# https://github.com/markuskimius/core
#
# Copyright (c)2020-2024 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/core/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Highlight matching text in file(s) or stdin.

Usage: ${SCRIPTNAME} [ARGS] REGEX [FILES]

  ARGS                  Arguments accepted by grep.
  REGEX                 Text to match.
  FILES                 File(s) in which to highlight the term.  [Default=stdin]

Examples:

  # Highlight all "source" in ~/.bashrc
  ${SCRIPTNAME} -w source ~/.bashrc

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

SCRIPTNAME=$(basename -- "$BASH_SOURCE")
SHORTOPT_NOARG=EFGPiwxzsvVbnHhoqaIrRLlcTZU0123456789
SHORTOPT_HASARG=efmdDBAC
LONGOPT_NOARG=(
    extended-regexp fixed-strings basic-regexp perl-regexp ignore-case
    word-regexp line-regexp null-data no-messages invert-match version help
    byte-offset line-number line-buffered with-filename no-filename
    only-matching quiet silent text recursive dereference-recursive
    files-without-match files-with-matches count initial-tab null binary
)
LONGOPT_HASARG=(
    regexp file max-count label binary-files directories devices include
    exclude exclude-from exclude-dir before-context after-context context
)
LONGOPT_HASOPTARG=(
    color colour
)


function main() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        usage && exit 0
    fi

    highlight "$@"
}


function highlight() {
    local optstring
    local pattern
    local opts=()

    optstring=$(getopt -o "$(shortopts)" -l "$(longopts)" -- "$@") || return $?
    eval set -- "$optstring"

    while true; do
        local c=$1

        [[ "$c" == "--" ]] && shift && break

        if [[ "$c" == "-e" || "$c" == "--regexp" ]]; then
            pattern=$2 && shift 2
            continue
        fi

        if [[ " ${LONGOPT_HASOPTARG[*]} " == *\ ${c:2}\ * ]]; then
            [[ -z "$2" ]] && opts+=( "$1" ) || opts+=( "$1=$2" )
            shift 2
            continue
        fi

        opts+=( "$1" ) && shift
        [[ "$SHORTOPT_NOARG" == *${c:1}* ]] && continue
        [[ " ${LONGOPT_NOARG[*]} " == *\ ${c:2}\ * ]] && continue

        opts+=( "$1" ) && shift
        [[ "$SHORTOPT_HASARG" == *${c:1}* ]] && continue
        [[ " ${LONGOPT_HASARG[*]} " == *\ ${c:2}\ * ]] && continue

        echo "We should never get here" 1>&2
        return 1
    done

    if ! [[ -v pattern ]]; then
        pattern="$1"
        shift
    fi

    exec grep --color "${opts[@]}" "$pattern\\|$" "$@"
}


function shortopts() {
    local opts=$SHORTOPT_NOARG
    local i

    for((i=0; i < ${#SHORTOPT_HASARG}; i++)); do
        opts+=${SHORTOPT_HASARG:$i:1}:
    done

    printf "%s" "$opts"
}


function longopts() {
    local opts=""
    local i

    for((i=0; i < ${#LONGOPT_NOARG[@]}; i++)); do
        opts+=,${LONGOPT_NOARG[$i]}
    done

    for((i=0; i < ${#LONGOPT_HASARG[@]}; i++)); do
        opts+=,${LONGOPT_HASARG[$i]}:
    done

    for((i=0; i < ${#LONGOPT_HASOPTARG[@]}; i++)); do
        opts+=,${LONGOPT_HASOPTARG[$i]}::
    done

    printf "%s" "${opts:1}"
}


##############################################################################
# ENTRY POINT

main "$@"
